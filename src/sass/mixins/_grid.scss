/// Grid system

// LEVEL 1: WRAPPER //
@mixin make-wrapper($padding-x: $container-padding-x) {
	width: 100%;
	margin-right: auto;
	margin-left: auto;
}

// EXCLUDING FW WRAPPER
@mixin make-wrapper-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@include make-wrapper();

	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		
		}
	}
}

// LEVEL 2: CONTAINER // 
@mixin make-container(){
	display: flex;
	flex-flow: row wrap;
	margin-right: auto;
	margin-left: auto;
	padding-right: $container-padding-x;
	padding-left: $container-padding-x;
	flex: 1 0 auto;
}

@mixin make-fw-container(){
	@include make-container();
	padding-right: 0;
	padding-left: 0;
}

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
}

// LEVEL 3: COLUMN // 
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {

	// Common properties for all breakpoints
	%grid-column {
		position: relative;
		width: 100%;
		padding-right: $gutter / 2;
		padding-left: $gutter / 2;
	}

	@each $breakpoint in map-keys($breakpoints) {
		$infix: breakpoint-infix($breakpoint, $breakpoints);

		@for $i from 1 through $columns {
			.col#{$infix}-#{$i} {
				@extend %grid-column;
			}
		}

		@include media-breakpoint-up($breakpoint, $breakpoints) {
			.col#{$infix} {
				@include make-col($columns, $columns); 
			}

			@for $i from 1 through $columns {
				.col#{$infix}-#{$i} {
					@include make-col($i, $columns);
				}
			}

		}
	}
}

@mixin make-col($size, $columns: $grid-columns) {
	color: $size;
	flex: 0 0 percentage($size / $columns);
	max-width: percentage($size / $columns);
}
